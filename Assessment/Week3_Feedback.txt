Starting weekly assessment for Eva, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.46 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, Week4, .git, Miniproject, Week3

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*.tmp
*~
*.pyc
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Title: CMEE Coursework Repository
# Author: Eva Linehan
# Date: Oct 2018

The purpose of this repository is to store CMEE required coursework for assessment. Coursework is organised by Week, for example coursework for week one will reside in the "Week1" folder. 

In each "Week" folder, coursework is arranged in the 'Data', 'Code', 'Sandbox' and 'Results' folders. The 'Data' folder comprises of data files used in practical exercises and assessments during the week. 'Code' contains code used to execute commands as part of in-class examples and weekly assessments. The 'Sandbox'folder is primarily for storing output files from test examples and the 'Results' folder will contain output files when scripts in 'Code' are executed.



 
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: Week1, Week2, Week3, Week4

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: Code, Data

Found the following files: .gitignore, README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# README Document for CMEECourseWork Week3
## Author: Eva Linehan - _el1718@ic.ac.uk_
## Date: _Oct - 2018_

### Description: 
This folder contains CMEE coursework from Week 3 arranged in the 'Data', 'Code' and 'Sandbox' folders. The 'Data' folder comprises of data files used in practical exercises and assessments during the week. 'Code' contains code used to execute commands as part of in-class examples and weekly assessments. The 'Sandbox'folder is primarily for storing output files from practical examples.

This week's coursework comprises of the following chapters of the "Multilingual Quantitative Biologist!" notebook;
Chapter 7: Biological Computing in R
Chapter 9: Data management, exploration, and visualization


### Tree map
```
.
├── Code
│   ├── apply1.R : Example script to demonstrate apply function. '
│   ├── apply2.R : Testing apply function using a built function '
│   ├── basic_io.R : A simple script to illustrate R input - output. '
│   ├── boilerplate.R : A boilerplate R script  '
│   ├── break.R : Example script to demonstrate breaking out of loops. '
│   ├── browse.R : Exampe script to demonstrate debugging using browser() function. '
│   ├── control.R : Some code exemplifying control flow constructs in R '
│   ├── DataWrang.R : Wrangling the Pound Hill Dataset '
│   ├── DataWrangTidy.R : Wrangling the Pound Hill Dataset using dplyr and tidyr '
│   ├── get_TreeHeight.R : Script to calculate height of trees from a given .csv file and output ' : This function calculates heights of trees given distance of each tree  '
│   ├── Girko.R : Script to plot Girko's Law simulation and save as pdf. "
│   ├── Inclass_plotting_exercise.R : In-class plotting exercises '
│   ├── KeyWestResults.tex : Key West Annual Mean Temperature Results '
│   ├── Maps.R : Mapping practical '
│   ├── MyBars.R : Annotating plots using geom text. '
│   ├── next.R : Example script to demonstrate skip iterations out of loops. '
│   ├── plotLin.R : Script to demonstrate mathematical annotation on an axis '
│   ├── PP_Lattice.R : Practical to create 3 lattice graphs by feeding interaction type '
│   ├── PP_Regress_loc.R : Script to generate plot of changes in predator mass with prey mass across different types of feeding interactions, seperated by location and grouped by predator lifestage. '
│   ├── PP_Regress.R : Script to generate plot of changes in predator mass with prey mass across different types of feeding interactions and grouped by predator lifestage.  '
│   ├── preallocate.R : b''
│   ├── sample.R : Example script to run a simulation that involves sampling from a population. '
│   ├── SQLinR.R : Script to demonstrate building, manipulating and accessing databases. '
│   ├── TAutoCorr.R : Autocorrelation in weather '
│   ├── Test.sqlite
│   ├── TreeHeight.R : This function calculates heights of trees given distance of each tree  '
│   ├── try.R : Example script to run a simulation that involves sampling from a population. '
│   ├── Vectorize1.R : Vectorization example to compare the process time of vectors in comparison to loops. '
│   └── Vectorize2.R : Modifing stochastic Ricker model to increase run time. '
├── Data
│   ├── EcolArchives-E089-51-D1.csv
│   ├── GPDDFiltered.RData
│   ├── KeyWestAnnualMeanTemperature.RData
│   ├── PoundHillData.csv
│   ├── PoundHillMetaData.csv
│   ├── PP_Results.csv
│   ├── Results.txt
│   ├── TAutoCorr_hist.pdf
│   └── trees.csv
├── README.md
└── Sandbox

3 directories, 39 files

```
**********************************************************************

Results directory missing!

Creating Results directory...

Found 28 code files: browse.R, PP_Regress.R, apply1.R, sample.R, KeyWestResults.tex, boilerplate.R, TreeHeight.R, PP_Lattice.R, next.R, Maps.R, Girko.R, Vectorize1.R, SQLinR.R, break.R, plotLin.R, basic_io.R, try.R, apply2.R, Inclass_plotting_exercise.R, get_TreeHeight.R, TAutoCorr.R, Vectorize2.R, DataWrangTidy.R, preallocate.R, PP_Regress_loc.R, DataWrang.R, MyBars.R, control.R

Found the following extra files: .Rhistory, Test.sqlite
0.5 pt deducted per extra file

Current Points = 99.0

======================================================================
Testing script/code files...

======================================================================
Inspecting script file browse.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Exampe script to demonstrate debugging using browser() function.

#clear environments
rm(list=ls())

Exponential<-function(N0=1,r=1, generations=10){
  # Runs a simulation of exponential growth
  # Returns a vector of generation length
  
  N<-rep(NA, generations)
  
  N[1]<-N0
  for(t in 2:generations){
    N[t]<-N[t-1]*exp(r)
    browser()
  }
  return(N)
}

plot(Exponential(), type = "l", main = "Exponential growth")
**********************************************************************

Testing browse.R...

Output (only first 500 characters): 

**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Code ran without errors

Time consumed = 0.11196s

======================================================================
Inspecting script file PP_Regress.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Script to generate plot of changes in predator mass with prey mass across different 
# types of feeding interactions and grouped by predator lifestage.

#clear environments
rm(list=ls())

require(ggplot2)
require(plyr)
require(dplyr)

MyDF<-read.csv("../Data/EcolArchives-E089-51-D1.csv")

pp <- MyDF %>% rowwise() %>%  mutate(Prey.mass = ifelse(Prey.mass.unit == "mg", Prey.mass/1000, Prey.mass))
# Pipe function to go through data rowise and replace Prey mass in mg with g (mass/1000)

pdf("../Results//PP_Regress_Fig.pdf", 9, 11.7)
# Generating empty pdf file for figure

p <- qplot(Prey.mass, 
           Predator.mass, 
           data = MyDF,
           log = "xy", # Logs data and axes
           xlab = "Prey Mass in grams",
           ylab = "Predator Mass in grams",
           colour = Predator.lifestage, 
           shape = I(3), 
           size = I(2),
           facets = Type.of.feeding.interaction~.)
p + geom_smooth(method = "lm", fullrange = T) + theme(legend.position = "bottom")
dev.off()

# Calculating regression results
# Group and subset variables using ddply and pass to linear model 
df2 <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm(Predator.mass~Prey.mass, data = x))

# Extract linear model results and make a data frame of the coefficients
lmextract <- ldply(df2, function(x) {
  intercept <-summary(x)$coefficients[1]
  slope <-summary(x)$coefficients[2]
  p_val <- summary(x)$coefficients[8]
  r2 <- summary(x)$r.squared
  data.frame(slope, intercept, r2, p_val)
})

# Add the f stat seperately using the same ldply function
f_stat <- ldply(df2, function(x) summary(x)$fstat[1])

# Merge f stat and other coefficients into the final dataframe
final_table <- merge(lmextract, f_stat, by = c("Type.of.feeding.interaction",
                                        "Predator.lifestage"), all = T)

# Give F stat column a header
names(final_table)[7] = "F statistc"

write.csv(final_table,"../Results/PP_Regress_Results.csv", row.names = F)
# Write to a csv file**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error:
Loading required package: ggplot2
Loading required package: plyr
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
In qt((1 - level)/2, df) : NaNs produced

======================================================================
Inspecting script file apply1.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Example script to demonstrate apply function.

## apply: applying the same function to rows/colums of a matrix

#clear environments
rm(list=ls())

## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)

## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)
**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 

**********************************************************************
 [1]  0.42775791  0.14369423  0.05119516  0.03790852 -0.38756586 -0.28844593
 [7]  0.20822031  0.17530251  0.47302353 -0.03185471
 [1] 1.2311007 2.2388276 0.1290692 0.6576819 1.3989320 0.5411813 1.4200503
 [8] 0.8904777 1.0039361 0.9587175
 [1] -0.05857280 -0.46631531  0.36229316 -0.04720735  0.43966995  0.53598309
 [7]  0.31799364  0.38301232 -0.17513656 -0.48248447

**********************************************************************

Code ran without errors

Time consumed = 0.06188s

======================================================================
Inspecting script file sample.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Example script to run a simulation that involves sampling from a population.

#clear environments
rm(list=ls())

x<-rnorm(50) #Generate population
doit<- function(x){
    x<-sample(x,replace = TRUE)
    if(length(unique(x))>30) {#only take mean if data is sufficient
        print(paste("Mean of this sample was:", as.character(mean(x))))
    }
    else {
      stop("Couldn't calculate mean: too few unique points!")
    }
}

## Run 100 iterations using vectorization

result<- lapply(1:100, function(i) tryCatch(doit(x), error=function(e) print("Too few points to calculate mean"))

result<-vector("list",100) #Initialize
for(i in 1:100){
  result[[i]]<-tryCatch(doit(x), error=function(e) print("Too few points to calculate mean"))
}


**********************************************************************

Testing sample.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error: unexpected symbol in:
"
result"
Execution halted

======================================================================
Inspecting script file KeyWestResults.tex...

File contents are:
**********************************************************************
\documentclass[12pt]{article}
\usepackage{graphicx}
\usepackage{siunitx}
\title{Key West Annual Mean Temperature Results}
\author{Eva Linehan}
\date{October 2018}
\begin{document}
  \maketitle
  
  \section{Objectives}
  The purpose of this exercise was to investigate if there was a correlation in mean annual temperature between successive years of the 20th century in Key West, Florida, USA.  
  
  \section{Results and Interpretation}
  The correlation coefficient between successive years was 0.326 which signifies a weak positive relationship. To investigate the significance of this correlation, the coefficient was compared to the correlation coeffients of the randomly permuted time series (n=10000). There was only a small fraction of random time series correlations greater than the successive years correlation coefficient. This suggests that the weak positive relationship identified between years is more significant than comparing the correlation between random years.
  In figure 1, the correlation coefficient of successive years was compared to the distribution of random correlation coefficients. This illustrates that the successive years correlation differs from random and is significant.
  
  \begin{figure}[ht]
  \includegraphics[width=1\textwidth]{../Data/TAutoCorr_hist.pdf}
  \caption{The distribution of correlation coefficients of each randonly permuted time sequence of mean annual temperatures in Key West, Florida, USA for the 20th century. The blue line signifies the position of the correlation coefficient of successive years in the random z-distribution.}
  \end{figure}
\end{document}

	content...
**********************************************************************

Testing KeyWestResults.tex...

======================================================================
Inspecting script file boilerplate.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: A boilerplate R script 

#clear environments
rm(list=ls())

MyFunction<- function(Arg1, Arg2){
  
  # Statements involving Arg1, Arg2: 
  print(paste("Argument", as.character(Arg1),"is a", class(Arg1)))
  print(paste("Argument", as.character(Arg2),"is a", class(Arg2)))
  
  return(c(Arg1, Arg2)) #optional but very useful
  
}

MyFunction(1,2) #Test function
MyFunction("Riki", "Tiki") #Different test

**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Argument 1 is a numeric"
[1] "Argument 2 is a numeric"
[1] 1 2
[1] "Argument Riki is a character"
[1] "Argument Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.10020s

======================================================================
Inspecting script file TreeHeight.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 


#clear environments
rm(list=ls())

# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

Data<-read.csv("../Data/trees.csv", header = TRUE)
Data<- read.table("../Data/trees.csv", sep = ",", header = TRUE)

TreeHeight <- function(degrees,distance) {
  radians<-degrees*pi/180
  height<-distance*tan(radians)
  
}

Tree.Height.m<-TreeHeight(Data$Angle.degrees,Data$Distance.m)
OutputData<- cbind(Data, Tree.Height.m)
write.csv(OutputData, "../Results/TreeHts.csv", row.names=TRUE) # write row names


**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07954s

======================================================================
Inspecting script file PP_Lattice.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Practical to create 3 lattice graphs by feeding interaction type
# on predator mass, prey mass and ratio of prey mass/predator mass.
# Mean and median of the above exported to csv.

# clear environments
rm(list=ls())
dev.off()

MyDF<-read.csv("../Data/EcolArchives-E089-51-D1.csv")

library(lattice)
# Creating and saving feeding interaction type by Predator mass
pdf("../Results/Pred_Lattice.pdf", # Open blank pdf to add lattice
    11.7, 8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF,
  xlab= "Predator Mass (kg)", 
  col = rgb(1,0,0,0.5))
dev.off() # Adds lattice to pdf

# Creating and saving feeding interaction type by Prey mass
pdf("../Results/Prey_Lattice.pdf", 
    11.7, 8.3)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data = MyDF,
            xlab= "Prey Mass (kg)", 
            col = rgb(1,0,0,0.5))
dev.off()

# Creating and saving feeding interaction type by Prey Mass/ Predator Mass ratio
ratio<-transform(MyDF, Prey_Predator_mass_ratio = Prey.mass/Predator.mass)
# Create variable 
plot(log(ratio$Prey_Predator_mass_ratio))
pdf("../Results/SizeRatio_Lattice.pdf", 
    11.7, 8.3)
densityplot(~log(Prey_Predator_mass_ratio) | Type.of.feeding.interaction, data = ratio,
            xlab= "Predator_Prey_mass_ratio",
            col= rgb(1,0,0,0.5))
dev.off()

# Calculating mean and median log predator mass, prey mass, 
# and predator-prey size ratio by feeding type.
require(dplyr)

pp_results <- MyDF %>% 
  group_by(Type.of.feeding.interaction) %>%
  summarise(
    Predator_mass_mean = mean(log(Predator.mass)),
    Predator_mass_median = median(log(Predator.mass)),
    Prey_mass_mean = mean(log(Prey.mass)),
    Prey_mass_median = median(log(Prey.mass)),
    Prey_prey_ratio_mean = mean(log(Prey.mass/Predator.mass)),
    Prey_prey_ratio_median = median(log(Prey.mass/Predator.mass))
    )
# Group by feeding type and summarise the mean and median of all specified variables
print(pp_results)
write.csv(pp_results, file= "../Data/PP_Results.csv", row.names = F)
# Write output to csv file**********************************************************************

Testing PP_Lattice.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in dev.off() : cannot shut down device 1 (the null device)
Execution halted

======================================================================
Inspecting script file next.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Example script to demonstrate skip iterations out of loops.

#clear environments
rm(list=ls())

for (i in 1:100){
  if ((i%%2)==0)
    next # pass to next iteration of loop
  print (i)
}**********************************************************************

Testing next.R...

Output (only first 500 characters): 

**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9
[1] 11
[1] 13
[1] 15
[1] 17
[1] 19
[1] 21
[1] 23
[1] 25
[1] 27
[1] 29
[1] 31
[1] 33
[1] 35
[1] 37
[1] 39
[1] 41
[1] 43
[1] 45
[1] 47
[1] 49
[1] 51
[1] 53
[1] 55
[1] 57
[1] 59
[1] 61
[1] 63
[1] 65
[1] 67
[1] 69
[1] 71
[1] 73
[1] 75
[1] 77
[1] 79
[1] 81
[1] 83
[1] 85
[1] 87
[1] 89
[1] 91
[1] 93
[1] 95
[1] 97
[1] 99

**********************************************************************

Code ran without errors

Time consumed = 0.08347s

======================================================================
Inspecting script file Maps.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Mapping practical

### Mapping the 

#clear environments
rm(list=ls())

load("../Data/GPDDFiltered.RData")
head(gpdd)
library(maps)

map(database = "world")
points(y=gpdd$lat, x = gpdd$long, cex=1.9, col="red")

# Biases will appear in the data due to the nature of species being measured 
# which all appear to be based primarily in Europe and the USA. This could be due to species
# range or where time series data was collected. Outlying time series data in North East Asia and 
# South Africa will bias results if analysis involves compring species abundance and
# distribution on a global scale.**********************************************************************

Testing Maps.R...

Output (only first 500 characters): 

**********************************************************************
             common.name   lat    long
1        Atlantic salmon 60.00   10.00
2            Pink salmon 45.62 -121.97
3              Great tit 51.63    1.08
4 Eurasian oystercatcher 51.70   -5.15
5                Skylark 51.70   -5.15
6               Starling 51.70   -5.15

**********************************************************************

Code ran without errors

Time consumed = 0.18342s

======================================================================
Inspecting script file Girko.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Script to plot Girko's Law simulation and save as pdf.

#clear environments
rm(list=ls())

build_ellipse <- function(hradius, vradius){ 
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))}

require(ggplot2)

N <- 250 # Size of the matrix
  
M <- matrix(rnorm(N * N), N, N) # Build the matrix
  
eigvals <- eigen(M)$values 
  
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
  
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
  
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
  
names(ellDF) <- c("Real", "Imaginary") # rename the columns
  
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")

# Add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))

# Add ellipse and save to pdf
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
pdf("../Results/Girko.pdf", 
   11.7, 8.3)
p
dev.off()
**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error:
Loading required package: ggplot2

======================================================================
Inspecting script file Vectorize1.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Vectorization example to compare the process time of vectors in comparison to loops.


#clear environments
rm(list=ls())

M<- matrix(runif(1000000),1000,1000)

SumALLELEMENTS <- function(M) {
  Dimensions <- dim(M)
  Tot<-0
  for (i in 1:Dimensions[1]){
    for (j in 1:Dimensions[2]){
      Tot<- Tot+M[i,j]
    }
  }
  return(Tot)
}

## This on my computer takes about 1 sec
print(system.time(SumALLELEMENTS(M)))
## While this takes about 0.01 sec
print(system.time(sum(M)))
**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 

**********************************************************************
   user  system elapsed 
  0.084   0.000   0.086 
   user  system elapsed 
  0.000   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.22506s

======================================================================
Inspecting script file SQLinR.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Script to demonstrate building, manipulating and accessing databases.

#clear environments
rm(list=ls())

# To load the packages
library(sqldf)

# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')

# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")

# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data

 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")


# Once we have our table, we can query the results using:

dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")


# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.

Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R

# Import data frames into database
 dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)

# Check that the data have been correctly imported into the School table.
 dbListTables(db)                 # The tables in the database
 dbListFields(db,"Resource")       # The columns in a table
 dbReadTable(db, "Resource")    # The data in a table

# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
 dbDisconnect(db)            # Close connection
 rm(list = c("Resource"))   # Remove data frames


**********************************************************************

Testing SQLinR.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Loading required package: gsubfn
Loading required package: proto
Loading required package: RSQLite
Error in rsqlite_send_query(conn@ptr, statement) : 
  table Consumer already exists
Calls: dbSendQuery ... initialize -> initialize -> rsqlite_send_query -> .Call
Execution halted

======================================================================
Inspecting script file break.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Example script to demonstrate breaking out of loops.

#clear environments
rm(list=ls())
i <- 0 #Initialize i
  while(i < Inf) {
    if (i == 20) {
      break 
  } # Break out of the while loop! 
  else { 
    cat("i equals " , i , " \n")
    i <- i + 1 # Update i
  }
}
**********************************************************************

Testing break.R...

Output (only first 500 characters): 

**********************************************************************
i equals  0  
i equals  1  
i equals  2  
i equals  3  
i equals  4  
i equals  5  
i equals  6  
i equals  7  
i equals  8  
i equals  9  
i equals  10  
i equals  11  
i equals  12  
i equals  13  
i equals  14  
i equals  15  
i equals  16  
i equals  17  
i equals  18  
i equals  19  

**********************************************************************

Code ran without errors

Time consumed = 0.08779s

======================================================================
Inspecting script file plotLin.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Script to demonstrate mathematical annotation on an axis

#clear environments
rm(list=ls())

# Create linear regression data
x<- seq(0, 100, by= 0.1)
y<- -4. + 0.25*x +
  rnorm(length(x), mean = 0., sd = 2.5)

# and put them in a dataframe 
my_data <- data.frame( x=x, y=y)
my_data

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                   parse = TRUE, size = 6, 
                   colour = "blue")

# Save to pdf
pdf("../Results/MyLinReg.pdf", 
    11.7, 8.3)
p
dev.off()
**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 

**********************************************************************
         x             y
1      0.0  -4.166337934
2      0.1  -3.710194750
3      0.2  -7.958594901
4      0.3  -4.330507504
5      0.4  -6.967150940
6      0.5  -0.907833094
7      0.6  -2.120541816
8      0.7  -2.266056064
9      0.8  -1.080285795
10     0.9   1.858961945
11     1.0  -4.356088095
12     1.1  -3.345945539
13     1.2  -3.109624308
14     1.3  -2.199299730
15     1.4  -2.951085828
16     1.5  -4.613256129
17     1.6  -1.525940687
18     1.7  -4.777265445
19     1.8 -10.568839037
2
**********************************************************************

Encountered error:
Error in ggplot(my_data, aes(x = x, y = y, colour = abs(my_lm$residual))) : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file basic_io.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: A simple script to illustrate R input - output.

#clear environments
rm(list=ls())
# Run line by line and check inputs/outputs to understand what is happening

MyData <- read.csv("../Data/trees.csv", header = TRUE) # Import with headers

write.csv(MyData, "../Results/MyData.csv") # Write it out as a new file

write.table(MyData[1,],file = "../Results/MyData.csv", append=TRUE) # Append to file

write.csv(MyData, "../Results/MyData.csv", row.names=TRUE) # write row names

write.table(MyData, "../Results/MyData.csv", col.names=FALSE) # ignore column names
**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Warning message:
In write.table(MyData[1, ], file = "../Results/MyData.csv", append = TRUE) :
  appending column names to file

======================================================================
Inspecting script file try.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Example script to run a simulation that involves sampling from a population.

#clear environments
rm(list=ls())

x<-rnorm(50) #Generate population
doit<- function(x){
    x<-sample(x,replace = TRUE)
    if(length(unique(x))>30) {#only take mean if data is sufficient
        print(paste("Mean of this sample was:", as.character(mean(x))))
    }
}

## Run 100 iterations using vectorization:
result<- lapply(1:100, function(i) doit(x))

## Or using a for loop:
result<-vector("list",100) #Initialize
for(i in 1:100){
  result[[i]]<-doit(x)
}


**********************************************************************

Testing try.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Mean of this sample was: -0.370064411350818"
[1] "Mean of this sample was: -0.128717976990305"
[1] "Mean of this sample was: -0.178383441896154"
[1] "Mean of this sample was: -0.240110845240464"
[1] "Mean of this sample was: -0.163824296055273"
[1] "Mean of this sample was: -0.123409969390457"
[1] "Mean of this sample was: -0.0814086355444034"
[1] "Mean of this sample was: -0.320158645613906"
[1] "Mean of this sample was: -0.0265289619823963"
[1] "Mean of this sample was: -0.199570480445902"
**********************************************************************

Code ran without errors

Time consumed = 0.10234s

======================================================================
Inspecting script file apply2.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Testing apply function using a built function

#clear environments
rm(list=ls())

SomeOperation <- function(v){ # (What does this function do?)
  if (sum(v) > 0){
    return (v * 100)
  }
  return (v)
}

M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))

**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 

**********************************************************************
              [,1]        [,2]       [,3]        [,4]        [,5]      [,6]
 [1,] -1.352260848 -105.375674  1.0076172 -0.02810771   69.274710  -5.35095
 [2,] -1.175178049  143.211502  0.3518484 -0.48360279  -49.573644 193.21123
 [3,] -1.038848608   34.082905  0.1661009  0.51899688  -11.832033 140.28318
 [4,] -0.731880431    1.587875 -0.5029064  1.36684761  114.380197  70.56642
 [5,] -0.006794588   66.662637 -0.1921201  0.30225882   37.697741  12.32110
 [6,]  1.396204840   51.107194  0.2492709  0.
**********************************************************************

Code ran without errors

Time consumed = 0.09206s

======================================================================
Inspecting script file Inclass_plotting_exercise.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: In-class plotting exercises

#clear environments
rm(list=ls())

MyDF<-read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF)

# Log plot to see actual predator prey mass regression
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), pch=20, xlab = "Predator Mass (g)", ylab = "Prey Mass (g)")

hist(MyDF$Predator.mass)
hist(MyDF$Prey.mass)

# Histograms side by side for predator/prey distributions
par(mfrow=c(2,2))
hist(log(MyDF$Predator.mass), xlab = "Predator Mass (g)", ylab = "Count", breaks = 5)
hist(log(MyDF$Prey.mass), xlab = "Prey mass (g)", ylab = "Count", breaks = 5)

dev.off()
par(mfcol=c(2,1))
par(mfg=c(1,1))
hist(log(MyDF$Predator.mass),
     xlab = "Predator Mass (g)", ylab = "Count",
     col = "blue", border = "lightblue",
     main = "Predator")
hist(log(MyDF$Prey.mass), 
     xlab = "Prey mass (g)", ylab = "Count",
     col="green", border = "lightgreen",
     main = "Prey")

# Overlapping Histograms
dev.off()
hist(log(MyDF$Predator.mass), # Predator histogram
     xlab="Body Mass (kg)", ylab="Count", 
     col = rgb(1, 0, 0, 0.5), # Note 'rgb', fourth value is transparency
     main = "Predator-prey size Overlap") 
hist(log(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = T) # Plot prey
legend('topleft',c('Predators','Prey'),   # Add legend
       fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) # Define legend colors

# Boxplots

# Distribution of predator mass across all locations
boxplot(log(MyDF$Predator.mass), xlab = "Location", ylab = "Predator Mass", main = "Predator mass")

# Distribution of predator mass split into each location
boxplot(log(MyDF$Predator.mass) ~ MyDF$Location,
        xlab = "Location", ylab = "Predator Mass",
        main = "Predator mass by location")

boxplot(log(MyDF$Predator.mass) ~ MyDF$Type.of.feeding.interaction,
        xlab = "Feeding Type", ylab = "Predator Mass",
        main = "Predator mass by feeding interaction type")

# Combining plots
par(fig=c(0,0.8,0,0.8)) # Specifying figure size as proportion
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass),
     xlab = "Predator Mass (kg)", ylab = "Prey Mass (kg)")
par(fig=c(0,0.8,0.4,1), new=TRUE)
boxplot(log(MyDF$Predator.mass), 
        horizontal=TRUE, axes=FALSE)
par(fig=c(0.55,1,0,0.8),new=TRUE)
boxplot(log(MyDF$Prey.mass), axes=FALSE)
mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)

# Lattice
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF)
# Finds the log Pred.mass for each feedying type in different graphs

pdf("../Results/Pred_Prey_Overlay.pdf", # Open blank pdf page using a relative path
    11.7, 8.3) # These numbers are page dimensions in inches
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
     xlab="Body Mass (kg)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap") 
hist(log(MyDF$Prey.mass), # Plot prey weights
     col = rgb(0, 0, 1, 0.5), 
     add = T)  # Add to same plot = TRUE
legend('topleft',c('Predators','Prey'), # Add legend
       fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) 
dev.off()
**********************************************************************

Testing Inclass_plotting_exercise.R...

Output (only first 500 characters): 

**********************************************************************
[1] 34931    15
null device 
          1 
null device 
          1 
pdf 
  2 

**********************************************************************

Code ran without errors

Time consumed = 1.61289s

======================================================================
Inspecting script file get_TreeHeight.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Script to calculate height of trees from a given .csv file and output
# the result in the following format; "InputFileName_treeheights.csv"

#clear environments
rm(list=ls())

# The height is calculated bu using the given distance of each tree from its base 
# and angle to its top, using  the trigonometric formula;
#
# height = distance * tan(radians)
#

directory <- "../Data/"
filenames <- list.files(directory, pattern = "*.csv", full.names = TRUE)
Data<-read.csv(filenames, header = TRUE)
Data<- read.table(filenames, sep = ",", header = TRUE)

TreeHeight <- function(degrees,distance) {
  radians<-degrees*pi/180
  height<-distance*tan(radians)
  print(paste("Tree height is:",height))
  
  return (height)
}

Height.m<-TreeHeight(Data$Angle.degrees,Data$Distance.m)
OutputData<- cbind(Data, Height.m)
write.csv(OutputData, "../Results/TreeHts2.csv", row.names=TRUE) # write row names
**********************************************************************

Testing get_TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in file(file, "rt") : invalid 'description' argument
Calls: read.csv -> read.table -> file
Execution halted

======================================================================
Inspecting script file TAutoCorr.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Autocorrelation in weather

### Calculating the correlation of mean temperatures in Key West, Florida for successive years in the 20th century

#clear environments
rm(list=ls())

# Analyze our data
load("../Data/KeyWestAnnualMeanTemperature.RData")
head(ats) # Display first 6 rows of data
Key<-ats 
scatter.smooth(Key) # Scatter plot with line of best fit
summary(Key$Temp)
Temp<-Key$Temp
Year<-Key$Year

# Align temperature data between successive years to compare 
t1<-Key[1:99,2]
t2<-Key[2:100,2]

Corr_successive_years<-cor(t1,t2)
Corr_successive_years

# Repeat function
tf<-function(t1,t2){
  t1<-sample(t1,size = length(t1),replace = TRUE)
  t2<-sample(t2,size = length(t2),replace=TRUE)
  return(cor(t1,t2))
}
# Randomize the alignment of t1 and t2 subsets, correlate these random alignments
  
result<-sapply(1:10000, function(i) tf(t1,t2))
# Run the t1 and t2 subsets through this function 10000 times

output<-result>Corr_successive_years
# Assign output variable to the number of cases in which randomly
# permuted time series correlations were greater than that of the correlation
# between successive years.
Fraction<-1-(length(output[output==FALSE])/length(result))
# The fraction of random correlations greater than that of successive years
# Length of cases in which random correlations were greater than successive
# years compared to length of all random correlations minus 1
Fraction #print

#Few correlations greater than ours, weak correlation but significant beacuse
#compared to a distribution of randomized permeated etc.
# our value explains it better, our value is different from random

# Interpret results
library(ggplot2)

pdf("../Data/TAutoCorr_hist.pdf", p)

hist(result,main=NULL,xlab = "Correlation_Result") 
abline(v=Corr_successive_years, col="blue")

dev.off()**********************************************************************

Testing TAutoCorr.R...

Output (only first 500 characters): 

**********************************************************************
  Year     Temp
1 1901 23.75000
2 1902 24.66667
3 1903 24.71667
4 1904 24.51667
5 1905 24.88333
6 1906 24.63333
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  23.75   24.99   25.29   25.31   25.62   26.35 
[1] 0.3261697
[1] 6e-04

**********************************************************************

Encountered error:
Error in pdf("../Data/TAutoCorr_hist.pdf", p) : object 'p' not found
Execution halted

======================================================================
Inspecting script file Vectorize2.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Modifing stochastic Ricker model to increase run time.

#clear environments
rm(list=ls())

# Runs the stochastic (with gaussian fluctuations) Ricker Eqn.


stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
  #initialize
  N<-matrix(NA,numyears,length(p0))
  N[1,]<-p0
  
#  for (pop in 1:length(p0)) #loop through the populations
  #{
# Removing the loop for populations runs the function through years, column by colummn, 
# as opposed to through years and populations, cell by cell.
  
    for (yr in 2:numyears) #for each pop, loop through the years
    {
      N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
    }
  #}
 return(N)

}

# Now write another function called stochrickvect that vectorizes the above 
# to the extent possible, with improved performance: 

print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))

**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.048   0.000   0.047 

**********************************************************************

Code ran without errors

Time consumed = 0.11985s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Wrangling the Pound Hill Dataset using dplyr and tidyr

#clear environments
rm(list=ls())

############# Load the dataset and packages ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F)) 

# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)

library(tidyr)
library(dplyr)
############# Inspect the dataset ###############
head(MyData)
dplyr::glimpse(MyData)
dplyr::glimpse(MyMetaData)
utils::View(MyData)
############# Transpose ###############
# To get those species into columns and treatments into rows 

MyData <- t(MyData) # Swaps columns and rows
head(MyData)


############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############


MyWrangledData<- TempData %>% gather(.,Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot = as.factor(Plot), Quadrat = as.factor(Quadrat))
utils::View(MyWrangledData)

############# Start exploring the data (extend the script below)!  ###############


**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 

**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Encountered error:

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


======================================================================
Inspecting script file preallocate.R...

File contents are:
**********************************************************************
# Pre-allocation exercise 
# The process time of loops is compared to loops with pre-allocated vectors.

a <- NA
for (i in 1:100000) {
  a <- c(a, i)
}
print(a)
# For loop that resizes and stores each vector with each iteration

b <- rep(NA, 1000000)
for (i in 1:1000000) {
  a[i] <- i
}
print(b)
# Pre-allocated vector in for loop that does not re-allocate memory with each iteration


print(system.time(a))
print(system.time(b))
**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00362s

======================================================================
Inspecting script file PP_Regress_loc.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: 

#clear environments
rm(list=ls())

require(ggplot2)
require(plyr)
require(dplyr)

MyDF<-read.csv("../Data/EcolArchives-E089-51-D1.csv")

pp <- MyDF %>% rowwise() %>%  mutate(Prey.mass = ifelse(Prey.mass.unit == "mg", Prey.mass/1000, Prey.mass))
# Pipe function to go through data rowise and replace Prey mass in mg with g (mass/1000)

pdf("../Results/PP_Regress_Fig.pdf", 9, 11.7)
# Generating empty pdf file for figure

p <- qplot(Prey.mass, 
           Predator.mass, 
           data = MyDF,
           log = "xy", # Logs data and axes
           xlab = "Prey Mass in grams",
           ylab = "Predator Mass in grams",
           colour = Predator.lifestage, 
           shape = I(3), 
           size = I(2),
           facets = Type.of.feeding.interaction~.)
p + geom_smooth(method = "lm", fullrange = T) + theme(legend.position = "bottom")
dev.off()

# Calculating regression results
# Group and subset variables using ddply and pass to linear model 
df2 <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage, Location), function(x) lm(Predator.mass~Prey.mass, data = x))

# Extract linear model results and make a data frame of the coefficients
lmextract <- ldply(df2, function(x) {
  intercept <-summary(x)$coefficients[1]
  slope <-summary(x)$coefficients[2]
  p_val <- summary(x)$coefficients[8]
  r2 <- summary(x)$r.squared
  data.frame(slope, intercept, r2, p_val)
})

# Add the f stat seperately using the same ldply function
f_stat <- ldply(df2, function(x) summary(x)$fstat[1])

# Merge f stat and other coefficients into the final dataframe
final_table <- merge(lmextract, f_stat, by = c("Type.of.feeding.interaction",
                                               "Predator.lifestage", "Location"), all = T)

# Give F stat column a header
names(final_table)[8] = "F statistc"

write.csv(final_table,"../Results/PP_Regress_Results_Loc.csv", row.names = F)
**********************************************************************

Testing PP_Regress_loc.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error:
Loading required package: ggplot2
Loading required package: plyr
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
In qt((1 - level)/2, df) : NaNs produced
Warning messages:
1: In summary.lm(x) : essentially perfect fit: summary may be unreliable
2: In summary.lm(x) : essentially perfect fit: summary may be unreliable
3: In summary.lm(x) : essentially perfect fit: summary may be unreliable
4: In summary.lm(x) : essentially perfect fit: summary may be unreliable
Warning message:
In summary.lm(x) : essentially perfect fit: summary may be unreliable

======================================================================
Inspecting script file DataWrang.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Wrangling the Pound Hill Dataset

#clear environments
rm(list=ls())

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F)) 

# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) # Swaps columns and rows
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Start exploring the data (extend the script below)!  ###############
 

**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 

**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00400s

======================================================================
Inspecting script file MyBars.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Annotating plots using geom text.

#clear environments
rm(list=ls())
dev.off()

a<-read.table("../Data/Results.txt", header = T)
head(a)

a$ymin<- rep(0, dim(a)[1]) # append column of 0s

# Print first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y1,
  size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
p

# Second linerange
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y2,
  size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
p

# Print third linerange
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y3,
  size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
p

# Annotate plot with labels
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
p

# Axis labels, remove legend, prepare for bw print
p <- p + scale_x_continuous("My x axis",
                            breaks = seq(3, 5, by = 0.05)) + 
  scale_y_continuous("My y axis") + 
  theme_bw() + 
  theme(legend.position = "none") 

# Saving plot as .pdf file
pdf("../Results/MyBars.pdf", 
    11.7, 8.3)
p
dev.off()
**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in dev.off() : cannot shut down device 1 (the null device)
Execution halted

======================================================================
Inspecting script file control.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
# Author: Eva Linehan
# Date: October 2018
# Desc: Some code exemplifying control flow constructs in R

#clear environments
rm(list=ls())

## If statement

a<-TRUE
if (a==TRUE){
  print("a is True")
} else {
  print ("a is FALSE")
}

## On a single line
z<-runif(1)
if (z<= 0.5) {
  print ("Less than a half")
}

## For loop using a sequence
for (i in 1:100){
  j<-i*i
  print(paste(i,"squared is",j))
}

## For loop using a vector
v1<-c("a","bc","def")
for (i in v1){
  print(i)
}

## While loop 
i<-0
while (i<100){
  i<-i+1
  print(i^2)
}

**********************************************************************

Testing control.R...

Output (only first 500 characters): 

**********************************************************************
[1] "a is True"
[1] "Less than a half"
[1] "1 squared is 1"
[1] "2 squared is 4"
[1] "3 squared is 9"
[1] "4 squared is 16"
[1] "5 squared is 25"
[1] "6 squared is 36"
[1] "7 squared is 49"
[1] "8 squared is 64"
[1] "9 squared is 81"
[1] "10 squared is 100"
[1] "11 squared is 121"
[1] "12 squared is 144"
[1] "13 squared is 169"
[1] "14 squared is 196"
[1] "15 squared is 225"
[1] "16 squared is 256"
[1] "17 squared is 289"
[1] "18 squared is 324"
[1] "19 squared is 361"
[1] "20 squared is 400"
[1]
**********************************************************************

Code ran without errors

Time consumed = 0.10139s

======================================================================
======================================================================
Finished running scripts

Ran into 12 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!