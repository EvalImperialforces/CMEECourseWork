demo()
q()
q()
q()
Sys.which("R")
q()
install.packages("dplyr")
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
setwd("~/Documents/CMEECourseWork/Week3/Code")
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData) # Swaps columns and rows
head(MyData)
install.packages("tidyr")
library(tidyr)
library(dplyr)
############# Inspect the dataset ###############
dplyr::glimpse(MyData)
dplyr::glimpse(MyMetaData)
utils::View(MyData)
MyData %>% mutate(group=1) %>% spread(Cultivation, Block, Plot, Quadrat)
############# Load the dataset and packages ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F), class="data.frame")
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
library(tidyr)
library(dplyr)
############# Inspect the dataset ###############
dplyr::glimpse(MyData)
dplyr::glimpse(MyMetaData)
utils::View(MyData)
MyData %>% mutate(group=1) %>% spread(Cultivation, Block, Plot, Quadrat)
############# Load the dataset and packages ###############
# header = false because the raw data don't have real headers
MyData <- as.data.frame(read.csv("../Data/PoundHillData.csv",header = F))
MyData %>% mutate(group=1) %>% spread(Cultivation, Block, Plot, Quadrat)
MyData[MyData == ""] = 0
############# Inspect the dataset ###############
dplyr::glimpse(MyData)
utils::View(MyData)
MyData <- gather(MyData, `1`:`45`, key = "month", value = "count")
MyData <- gather(MyData, `0`:`45`, key = "month", value = "count")
############# Load the dataset and packages ###############
# header = false because the raw data don't have real headers
MyData <- as.data.frame(read.csv("../Data/PoundHillData.csv",header = T))
MyData <- gather(MyData, `0`:`45`, key = "month", value = "count")
MyData <- gather(MyData, `1`:`45`, key = "month", value = "count")
############# Inspect the dataset ###############
dplyr::glimpse(MyData)
############# Load the dataset and packages ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
############# Inspect the dataset ###############
dplyr::glimpse(MyData)
MyData <- gather(MyData, `V1`:`V60`, key = "month", value = "count")
MyData %>% as.data.frame %>% rownames_to_col(.,'Var1') %>% gather(Var2, value, -Var1, convert = T)
MyData %>% as.data.frame %>% rownames_to_column(.,'Var1') %>% gather(Var2, value, -Var1, convert = T)
############# Load the dataset and packages ###############
# header = false because the raw data don't have real headers
MyData <- as.data.frame(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
library(tidyr)
library(dplyr)
############# Inspect the dataset ###############
dplyr::glimpse(MyData)
spread(MyData, key, value)
dplyr::glimpse(MyMetaData)
MyData %>% group_by("Cultivation", "Block", "PLot", "Quadrat") %>% gather(key = "Species", value = "Count" )
MyData %>% group_by("Cultivation", "Block", "PLot", "Quadrat") %>% gather(key = ("Cultivation", "Block", "PLot", "Quadrat", "Species"), value = "Count" )
MyData %>% gather(key = ("Cultivation", "Block", "PLot", "Quadrat", "Species"), value = "Count" )
setwd("~/Documents/CMEECourseWork/Week3/Code")
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData) # Swaps columns and rows
head(MyData)
############# Load the dataset and packages ###############
# header = false because the raw data don't have real headers
MyData <- as.data.frame(read.csv("../Data/PoundHillData.csv",header = F))
head(MyData)
############# Inspect the dataset ###############
dplyr::glimpse(MyData)
MyData %>% gather(key = "Cultivation", value = "month", na.rm = TRUE)
MyData %>% gather(key = "Species", value = "count", V1:V60)
############# Inspect the dataset ###############
head(MyData)
#install the sqlite package
install.packages('sqldf')
# To load the packages
library(sqldf)
# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')
#clear environments
rm(list=ls())
# To load the packages
library(sqldf)
# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')
# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
"CREATE TABLE Consumer
(OriginalID TEXT,
ConKingdom TEXT,
ConPhylum TEXT,
ConSpecies TEXT)")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")
dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")
Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R
# Import data frames into database
dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)
# Check that the data have been correctly imported into the School table.
dbListTables(db)                 # The tables in the database
#clear environments
rm(list=ls())
############# Load the dataset and packages ###############
# header = false because the raw data don't have real headers
MyData <- as.data.frame(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
library(tidyr)
library(dplyr)
############# Inspect the dataset ###############
head(MyData)
dplyr::glimpse(MyData)
dplyr::glimpse(MyMetaData)
utils::View(MyData)
MyWrangled<- MyData %>% gather(.,Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot = as.factor(Plot), Quadrant = as.factor(Quadrant))  )
MyWrangled<- MyData %>% gather(.,Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot = as.factor(Plot), Quadrant = as.factor(Quadrant))
MyData <- tbl_df(MyData) # Swaps columns and rows
head(MyData)
MyWrangled<- MyData %>% gather(.,Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot = as.factor(Plot), Quadrant = as.factor(Quadrant))
MyData <- t(MyData) # Swaps columns and rows
head(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
MyWrangled<- MyData %>% gather(.,Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot = as.factor(Plot), Quadrant = as.factor(Quadrant))
str(MyWrangledData)
MyWrangled<- MyData %>% gather(.,Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot = as.factor(Plot), Quadrant = as.factor(Quadrant))
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
MyWrangled<- MyData %>% gather(.,Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot = as.factor(Plot), Quadrant = as.factor(Quadrant))
MyWrangledData<- TempData %>% gather(.,Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot = as.factor(Plot), Quadrant = as.factor(Quadrant))
MyWrangledData<- TempData %>% gather(.,Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot = as.factor(Plot), Quadrat = as.factor(Quadrat))
utils::View(MyWrangledData)
MyDF<-read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
rm(list=ls())
MyDF<-read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
View(MyDF)
str(MyDF)
plot(MyDF$Predator.mass,MyDF$Prey.mass)
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass))
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), pch=20)
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), pch=20, xlab = "Predator Mass (kg)", ylab = "Prey Mass (g)")
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), pch=20, xlab = "Predator Mass (g)", ylab = "Prey Mass (g)")
hist(MyDF$Prey.mass)
hist(MyDF$Predator.mass)
hist(log(MyDF$Predator.mass), xlab = "Predator Mass (kg)", ylab = "Count")
hist(log(MyDF$Prey.mass), xlab = "Prey mass (g)", ylab = "Count")
hist(log(MyDF$Prey.mass), xlab = "Prey mass (g)", ylab = "Count", breaks = 10)
hist(log(MyDF$Prey.mass), xlab = "Prey mass (g)", ylab = "Count", breaks = 5)
hist(log(MyDF$Predator.mass), xlab = "Predator Mass (g)", ylab = "Count")
hist(log(MyDF$Predator.mass), xlab = "Predator Mass (g)", ylab = "Count", breaks = 5)
par(mfrow=c(2))
hist(log(MyDF$Predator.mass), xlab = "Predator Mass (g)", ylab = "Count", breaks = 5)
hist(log(MyDF$Prey.mass), xlab = "Prey mass (g)", ylab = "Count", breaks = 5)
par(mfrow=c(2,2))
hist(log(MyDF$Predator.mass), xlab = "Predator Mass (g)", ylab = "Count", breaks = 5)
hist(log(MyDF$Prey.mass), xlab = "Prey mass (g)", ylab = "Count", breaks = 5)
par(mfcol=c(2,1))
par(mfg=c(1,1))
hist(log(MyDF$Predator.mass),
xlab = "Predator Mass (g)", ylab = "Count",
col = "blue", border = "lightblue",
main = "Predator")
dev.off()
par(mfcol=c(2,1))
par(mfg=c(1,1))
hist(log(MyDF$Predator.mass),
xlab = "Predator Mass (g)", ylab = "Count",
col = "blue", border = "lightblue",
main = "Predator")
hist(log(MyDF$Prey.mass),
xlab = "Prey mass (g)", ylab = "Count",
col="green", border = "lightgreen",
main = "Prey")
initrm(list=ls())
dev.off()
hist(log(MyDF$Predator.mass), # Predator histogram
xlab="Body Mass (kg)", ylab="Count",
col = rgb(1, 0, 0, 0.5), # Note 'rgb', fourth value is transparency
main = "Predator-prey size Overlap")
hist(log(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = T) # Plot prey
legend('topleft',c('Predators','Prey'),   # Add legend
fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) # Define legend colors
boxplot(log(MyDF$Predator.mass), xlab = "Location", ylab = "Predator Mass", main = "Predator mass")
boxplot(log(MyDF$Predator.mass) ~ MyDF$Location,
xlab = "Location", ylab = "Predator Mass",
main = "Predator mass by location")
boxplot(log(MyDF$Predator.mass) ~ MyDF$Type.of.feeding.interaction,
xlab = "Feeding Type", ylab = "Predator Mass",
main = "Predator mass by feeding interaction type")
# Combining plots
par(fig=c(0,0.8,0,0.8)) # Specifying figure size as proportion
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass),
xlab = "Predator Mass (kg)", ylab = "Prey Mass (kg)")
par(fig=c(0,0.8,0.4,1), new=TRUE)
boxplot(log(MyDF$Predator.mass),
horizontal=TRUE, axes=FALSE)
par(fig=c(0.55,1,0,0.8),new=TRUE)
boxplot(log(MyDF$Prey.mass), axes=FALSE)
mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
install.packages("lattice")
# Lattice
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF)
pdf("../Results/Pred_Prey_Overlay.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (kg)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap")
hist(log(MyDF$Prey.mass), # Plot prey weights
col = rgb(0, 0, 1, 0.5),
add = T)  # Add to same plot = TRUE
legend('topleft',c('Predators','Prey'), # Add legend
fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5)))
dev.off()
#clear environments
rm(list=ls())
MyDF<-read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF)
#clear environments
rm(list=ls())
dev.off()
MyDF<-read.csv("../Data/EcolArchives-E089-51-D1.csv")
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF)
panel.smoothScatter(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF)
panel.smooth(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF,
xlab= "Predator Mass (kg)")
pdf("../Results/Pred_Lattics.pdf", # Open blank pdf page using a relative path
11.7, 8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF,
xlab= "Predator Mass (kg)")
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF,
xlab= "Predator Mass (kg)",
col = rgb(1,0,0,0.5))
dev.off()
pdf("../Results/Pred_Lattics.pdf", # Open blank pdf page using a relative path
11.7, 8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF,
xlab= "Predator Mass (kg)",
col = rgb(1,0,0,0.5))
dev.off()
pdf("../Results/Pred_Lattice.pdf", # Open blank pdf to add lattice
11.7, 8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF,
xlab= "Predator Mass (kg)",
col = rgb(1,0,0,0.5))
dev.off() # Adds lattice to pdf
pdf("../Results/Prey_Lattice.pdf",
11.7, 8.3)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data = MyDF,
xlab= "Prey Mass (kg)",
col = rgb(1,0,0,0.5))
dev.off()
# Creating and saving feeding interaction type by Prey Mass/ Predator Mass ratio
ratio<-subset(MyDF$Prey.mass/MyDF$Predator.mass)
# Creating and saving feeding interaction type by Prey Mass/ Predator Mass ratio
ratio<-transform(MyDF, Prey_Predator_mass_ratio = Prey.mass/Predator.mass)
ratio
hist(ratio)
hist(ratio$Prey_Predator_mass_ratio)
plot(ratio$Prey_Predator_mass_ratio)
plot(,ratio$Prey_Predator_mass_ratio)
plot(ratio$Prey_Predator_mass_ratio)
plot(log(ratio$Prey_Predator_mass_ratio))
pdf("../Results/SizeRatio_Lattice.pdf",
11.7, 8.3)
densityplot(~log(Prey_Predator_mass_ratio) | Type.of.feeding.interaction, data = ratio,
xlab= "Predator_Prey_mass_ratio",
col= rgb(1,0,0,0.5))
dev.off
pdf("../Results/SizeRatio_Lattice.pdf",
11.7, 8.3)
densityplot(~log(Prey_Predator_mass_ratio) | Type.of.feeding.interaction, data = ratio,
xlab= "Predator_Prey_mass_ratio",
col= rgb(1,0,0,0.5))
dev.off()
